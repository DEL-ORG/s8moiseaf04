pipeline {
    agent any
    
    parameters {
        string(name: 'NAME', defaultValue: 'Jenkins User', description: 'Your name')
        choice(name: 'OS', choices: ['Windows', 'macOS', 'Linux', 'Other'], description: 'Your primary operating system')
        choice(name: 'GENDER', choices: ['Male', 'Female', 'Other', 'Prefer not to say'], description: 'Your gender')
        string(name: 'GREETING', defaultValue: 'Hello', description: 'Custom greeting message')
        choice(name: 'DIRECTORY', choices: ['.', 'src', 'docs'], description: 'Directory to list')
        booleanParam(name: 'CLEAN_UP', defaultValue: false, description: 'Perform a clean-up operation')
        choice(name: 'FILE_TYPE', choices: ['All', '*.txt', '*.java', '*.md'], description: 'Type of files to display')
    }

    stages {
        stage('Introduction') {
            steps {
                script {
                    echo "${params.GREETING}, ${params.NAME}!"
                    echo "Operating System: ${params.OS}"
                    echo "Gender: ${params.GENDER}"
                }
            }
        }
        stage('Hello') {
            steps {
                script {
                    if ("${params.FILE_TYPE}" == "All") {
                        sh """
                        if [ -d ${params.DIRECTORY} ]; then
                            ls ${params.DIRECTORY}
                        else
                            echo "Directory ${params.DIRECTORY} does not exist."
                        fi
                        """
                    } else {
                        sh """
                        if [ -d ${params.DIRECTORY} ]; then
                            ls ${params.DIRECTORY}/${params.FILE_TYPE}
                        else
                            echo "Directory ${params.DIRECTORY} does not exist."
                        fi
                        """
                    }
                    pwd()
                }
            }
        }
        
        stage('Clean Up') {
            when {
                expression { return params.CLEAN_UP }
            }
            steps {
                script {
                    echo "Performing clean-up operations for ${params.NAME}..."
                    // Add your clean-up commands here, for demonstration:
                    sh "echo 'Clean-up would proceed here'"
                }
            }
        }
    }
}
